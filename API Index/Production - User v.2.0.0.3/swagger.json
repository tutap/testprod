{
  "openapi": "3.0.1",
  "info": {
    "title": "User",
    "description": "<p>Manage Users</p>",
    "contact": {
      "name": "The API Practice"
    },
    "license": {
      "name": "Private"
    },
    "version": "2.0.0.3"
  },
  "servers": [
    {
      "url": "{protocol}://api.test.com{basePath}",
      "variables": {
        "basePath": {
          "default": "/v2/user"
        },
        "protocol": {
          "default": "http",
          "enum": [
            "https"
          ]
        }
      }
    }
  ],
  "paths": {
    "/": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "to create user",
        "description": "<p id='autoGen'><b>Mock Endpoint URL: </b>https://api.flowstep.com/api/mock/08d73c56-dd71-ef8f-e498-789ebc3c296a</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "User",
                "required": [
                  "id",
                  "userName",
                  "password"
                ],
                "type": "object",
                "properties": {
                  "userName": {
                    "title": "User Name",
                    "maxLength": 30,
                    "minLength": 6,
                    "pattern": "\\w",
                    "type": "string",
                    "description": "<p>User name, unique as per user</p><p>Cannot be changed once created</p><p>Minimum 6 characters</p><p>Only accept alphanumeric characters</p>",
                    "example": "tubxxxxx33"
                  },
                  "password": {
                    "title": "Password",
                    "maxLength": 100,
                    "minLength": 8,
                    "type": "string",
                    "description": "<p>Hard password </p>",
                    "example": "sdvz@$RCvcv"
                  },
                  "name": {
                    "title": "Name",
                    "type": "string",
                    "example": "Tu"
                  }
                },
                "description": "<p>User is app</p>"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "User",
                  "required": [
                    "id",
                    "userName",
                    "password"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "title": "Id",
                      "type": "string",
                      "description": "<p>Entity ID, using uuid</p>",
                      "example": "b1f139fc-4b05-4a1e-bbd3-427ebc3c02dc"
                    },
                    "userName": {
                      "title": "User Name",
                      "maxLength": 30,
                      "minLength": 6,
                      "pattern": "\\w",
                      "type": "string",
                      "description": "<p>User name, unique as per user</p><p>Cannot be changed once created</p><p>Minimum 6 characters</p><p>Only accept alphanumeric characters</p>",
                      "example": "tubxxxxx33"
                    },
                    "name": {
                      "title": "Name",
                      "type": "string",
                      "example": "Tu"
                    }
                  },
                  "description": "<p>User is app</p>"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "To get user by id",
        "description": "<p id='autoGen'><b>Mock Endpoint URL: </b>https://api.flowstep.com/api/mock/08d73c56-dd72-18f0-153d-bb20f2f04253</p>",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "<p>The HTTP <strong><code>Authorization</code></strong> request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a <a href=\"/en-US/docs/Web/HTTP/Status/401\" title=\"The HTTP 401 Unauthorized client error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.\"><code>401</code></a> <code>Unauthorized</code> status and the <a href=\"/en-US/docs/Web/HTTP/Headers/WWW-Authenticate\" title=\"The HTTP WWW-Authenticate response header defines the authentication method that should be used to gain access to a resource.\"><code>WWW-Authenticate</code></a> header.</p>",
            "schema": {
              "title": "Authorization",
              "type": "string",
              "description": "<p>The HTTP <strong><code>Authorization</code></strong> request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a <a href=\"/en-US/docs/Web/HTTP/Status/401\" title=\"The HTTP 401 Unauthorized client error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.\"><code>401</code></a> <code>Unauthorized</code> status and the <a href=\"/en-US/docs/Web/HTTP/Headers/WWW-Authenticate\" title=\"The HTTP WWW-Authenticate response header defines the authentication method that should be used to gain access to a resource.\"><code>WWW-Authenticate</code></a> header.</p>",
              "example": "Basic YWxhZGRpbjpvcGVuc2VzYW1l"
            }
          },
          {
            "name": "includeDetails",
            "in": "query",
            "schema": {
              "title": "Include Details",
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "<p>Entity ID, using uuid</p>",
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string",
              "description": "<p>Entity ID, using uuid</p>",
              "example": "b1f139fc-4b05-4a1e-bbd3-427ebc3c02dc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "User",
                  "required": [
                    "id",
                    "userName",
                    "password"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "title": "Id",
                      "type": "string",
                      "description": "<p>Entity ID, using uuid</p>",
                      "example": "b1f139fc-4b05-4a1e-bbd3-427ebc3c02dc"
                    },
                    "userName": {
                      "title": "User Name",
                      "maxLength": 30,
                      "minLength": 6,
                      "pattern": "\\w",
                      "type": "string",
                      "description": "<p>User name, unique as per user</p><p>Cannot be changed once created</p><p>Minimum 6 characters</p><p>Only accept alphanumeric characters</p>",
                      "example": "tubxxxxx33"
                    },
                    "name": {
                      "title": "Name",
                      "type": "string",
                      "example": "Tu"
                    }
                  },
                  "description": "<p>User is app</p>"
                }
              }
            }
          }
        }
      }
    },
    "/{id}/password": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "To update user password",
        "description": "<p id='autoGen'><b>Mock Endpoint URL: </b>https://api.flowstep.com/api/mock/08d73c56-dd72-2e60-d1a5-047cdfc7bdf9</p>",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "<p>The HTTP <strong><code>Authorization</code></strong> request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a <a href=\"/en-US/docs/Web/HTTP/Status/401\" title=\"The HTTP 401 Unauthorized client error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.\"><code>401</code></a> <code>Unauthorized</code> status and the <a href=\"/en-US/docs/Web/HTTP/Headers/WWW-Authenticate\" title=\"The HTTP WWW-Authenticate response header defines the authentication method that should be used to gain access to a resource.\"><code>WWW-Authenticate</code></a> header.</p>",
            "schema": {
              "title": "Authorization",
              "type": "string",
              "description": "<p>The HTTP <strong><code>Authorization</code></strong> request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a <a href=\"/en-US/docs/Web/HTTP/Status/401\" title=\"The HTTP 401 Unauthorized client error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.\"><code>401</code></a> <code>Unauthorized</code> status and the <a href=\"/en-US/docs/Web/HTTP/Headers/WWW-Authenticate\" title=\"The HTTP WWW-Authenticate response header defines the authentication method that should be used to gain access to a resource.\"><code>WWW-Authenticate</code></a> header.</p>",
              "example": "Basic YWxhZGRpbjpvcGVuc2VzYW1l"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "<p>Entity ID, using uuid</p>",
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string",
              "description": "<p>Entity ID, using uuid</p>",
              "example": "b1f139fc-4b05-4a1e-bbd3-427ebc3c02dc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "",
                "required": [
                  "pass"
                ],
                "type": "object",
                "properties": {
                  "pass": {
                    "title": "Password",
                    "maxLength": 100,
                    "minLength": 8,
                    "type": "string",
                    "description": "<p>Hard password </p>",
                    "example": "sdvz@$RCvcv"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": ""
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorisedResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "required": [
          "id",
          "userName",
          "password"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "<p>Entity ID, using uuid</p>",
            "example": "b1f139fc-4b05-4a1e-bbd3-427ebc3c02dc"
          },
          "userName": {
            "title": "User Name",
            "maxLength": 30,
            "minLength": 6,
            "pattern": "\\w",
            "type": "string",
            "description": "<p>User name, unique as per user</p><p>Cannot be changed once created</p><p>Minimum 6 characters</p><p>Only accept alphanumeric characters</p>",
            "example": "tubxxxxx33"
          },
          "password": {
            "title": "Password",
            "maxLength": 100,
            "minLength": 8,
            "type": "string",
            "description": "<p>Hard password </p>",
            "example": "sdvz@$RCvcv"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "example": "Tu"
          }
        },
        "description": "<p>User is app</p>"
      },
      "BadRequestResponse": {
        "title": "Bad Request Response",
        "type": "object",
        "properties": {
          "error": {
            "title": "Bad Request Error",
            "type": "string",
            "example": "bad_request"
          },
          "message": {
            "title": "Bad Request Message",
            "type": "string",
            "example": "Bad Request"
          }
        }
      },
      "UnauthorisedResponse": {
        "title": "Unauthorised Response",
        "type": "object",
        "properties": {
          "error": {
            "title": "Unauthorised Error",
            "type": "string",
            "example": "unauthorised"
          },
          "message": {
            "title": "Unauthorised Message",
            "type": "string",
            "example": "Unauthorised. Please check your credentials."
          }
        }
      }
    }
  }
}